import unittest

import json

from sudoku import sudoku_solver, PuzzleInvalidException, PuzzleImpossibleException

class TestSudoku(unittest.TestCase):
    def setUp(self):
        pass

    def tearDown(self):
        pass

    def test_kata(self):
        puzzle = [[0, 0, 6, 1, 0, 0, 0, 0, 8], 
                    [0, 8, 0, 0, 9, 0, 0, 3, 0], 
                    [2, 0, 0, 0, 0, 5, 4, 0, 0], 
                    [4, 0, 0, 0, 0, 1, 8, 0, 0], 
                    [0, 3, 0, 0, 7, 0, 0, 4, 0], 
                    [0, 0, 7, 9, 0, 0, 0, 0, 3], 
                    [0, 0, 8, 4, 0, 0, 0, 0, 6], 
                    [0, 2, 0, 0, 5, 0, 0, 8, 0], 
                    [1, 0, 0, 0, 0, 2, 5, 0, 0]]

        solution = [[3, 4, 6, 1, 2, 7, 9, 5, 8], 
                    [7, 8, 5, 6, 9, 4, 1, 3, 2], 
                    [2, 1, 9, 3, 8, 5, 4, 6, 7], 
                    [4, 6, 2, 5, 3, 1, 8, 7, 9], 
                    [9, 3, 1, 2, 7, 8, 6, 4, 5], 
                    [8, 5, 7, 9, 4, 6, 2, 1, 3], 
                    [5, 9, 8, 4, 1, 3, 7, 2, 6],
                    [6, 2, 4, 7, 5, 9, 3, 8, 1],
                    [1, 7, 3, 8, 6, 2, 5, 9, 4]]

        mine = sudoku_solver(puzzle)
        self.assertEqual(mine, solution)

    def test_invalid_kata(self):
        invalid = [[1, 1, 3, 4, 5, 6, 7, 8, 9], 
                    [4, 0, 6, 7, 8, 9, 1, 2, 3], 
                    [7, 8, 9, 1, 2, 3, 4, 5, 6], 
                    [2, 3, 4, 5, 6, 7, 8, 9, 1], 
                    [5, 6, 7, 8, 9, 1, 2, 3, 4], 
                    [8, 9, 1, 2, 3, 4, 5, 6, 7], 
                    [3, 4, 5, 6, 7, 8, 9, 1, 2], 
                    [6, 7, 8, 9, 1, 2, 3, 4, 5], 
                    [9, 1, 2, 3, 4, 5, 6, 7, 8]]

        with self.assertRaises(PuzzleInvalidException):
            _result = sudoku_solver(invalid)        

    def test_simple_puzzle(self):
        puzzle = [[0, 9, 6, 5, 0, 4, 0, 7, 1], 
                    [0, 2, 0, 1, 0, 0, 0, 0, 0], 
                    [0, 1, 4, 0, 9, 0, 6, 2, 3], 
                    [0, 0, 3, 0, 6, 0, 0, 8, 0], 
                    [0, 0, 8, 0, 5, 0, 4, 0, 0], 
                    [9, 0, 0, 4, 0, 0, 0, 0, 5], 
                    [7, 0, 0, 0, 0, 9, 0, 0, 0], 
                    [0, 0, 1, 0, 7, 5, 3, 4, 9], 
                    [2, 3, 0, 0, 4, 8, 1, 0, 7]]

        solution = [[3, 9, 6, 5, 2, 4, 8, 7, 1], 
                    [8, 2, 7, 1, 3, 6, 5, 9, 4], 
                    [5, 1, 4, 8, 9, 7, 6, 2, 3], 
                    [4, 5, 3, 7, 6, 1, 9, 8, 2], 
                    [1, 7, 8, 9, 5, 2, 4, 3, 6], 
                    [9, 6, 2, 4, 8, 3, 7, 1, 5], 
                    [7, 4, 5, 3, 1, 9, 2, 6, 8], 
                    [6, 8, 1, 2, 7, 5, 3, 4, 9], 
                    [2, 3, 9, 6, 4, 8, 1, 5, 7]]
        
        result = sudoku_solver(puzzle)
        self.assertEqual(result, solution)

    def test_hard_puzzle(self):
        puzzle = [[0, 7, 0, 0, 3, 0, 0, 5, 0], 
                    [0, 0, 0, 9, 0, 2, 0, 0, 0], 
                    [1, 0, 6, 0, 0, 0, 4, 0, 2], 
                    [0, 0, 4, 0, 0, 0, 8, 0, 0], 
                    [7, 0, 0, 0, 4, 0, 0, 0, 5], 
                    [0, 0, 1, 0, 0, 0, 6, 0, 0], 
                    [8, 0, 5, 0, 0, 0, 7, 0, 3], 
                    [0, 0, 0, 8, 0, 9, 0, 0, 0], 
                    [0, 6, 0, 0, 7, 0, 0, 1, 0]]
        
        result = sudoku_solver(puzzle)

        answer = [[2, 7, 8, 1, 3, 4, 9, 5, 6], 
                    [4, 5, 3, 9, 6, 2, 1, 8, 7], 
                    [1, 9, 6, 5, 8, 7, 4, 3, 2], 
                    [6, 2, 4, 3, 9, 5, 8, 7, 1], 
                    [7, 8, 9, 6, 4, 1, 3, 2, 5], 
                    [5, 3, 1, 7, 2, 8, 6, 4, 9], 
                    [8, 4, 5, 2, 1, 6, 7, 9, 3], 
                    [3, 1, 7, 8, 5, 9, 2, 6, 4], 
                    [9, 6, 2, 4, 7, 3, 5, 1, 8]]

        self.assertEqual(result, answer)                    

    def test_invalid_kata_examples(self):
        invalids = [[[1, 1, 3, 4, 5, 6, 7, 8, 9], [4, 0, 6, 7, 8, 9, 1, 2, 3], [7, 8, 9, 1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7, 8, 9, 1], [5, 6, 7, 8, 9, 1, 2, 3, 4], [8, 9, 1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9, 1, 2], [6, 7, 8, 9, 1, 2, 3, 4, 5], [9, 1, 2, 3, 4, 5, 6, 7, 8]],
                    [[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 0, 6, 7, 8, 9, 1, 2, 3], [7, 8, 9, 1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7, 8, 9, 1], [5, 6, 7, 8, 9, 1, 2, 3, 4], [8, 9, 1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9, 1, 2], [6, 7, 8, 9, 1, 2, 3, 4, 5], [9, 1, 2, 3, 4, 5, 6, 7, 8]],
                    [[1, 2, 3, 4, 5, 6, 7, 8, 9], [4, 0, 6, 7, 8, 9, 1, 2, 3], [7, 8, 1, 1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7, 8, 9, 1], [5, 6, 7, 8, 9, 1, 2, 3, 4], [8, 9, 1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9, 1, 2], [6, 7, 8, 9, 1, 2, 3, 4, 5], [9, 1, 2, 3, 4, 5, 6, 7, 8]],
                    [[1, 2, 3, 4, 5, 6, 7, 8, 9], [4, 0, 6, 7, 8, 9, 1, 2, 3], [7, 8, 9, 1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7, 8, 9, 1], [5, 6, 7, 8, 9, 1, 2, 3, 4], [8, 9, 1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9, 1, 2], [6, 7, 8, 9, 1, 2, 3, 4, 5]],
                    [[1, 2, 3, 4, 5, 6, 7, 8], [4, 0, 6, 7, 8, 9, 1, 2], [7, 8, 9, 1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9], [5, 6, 7, 8, 9, 1, 2, 3], [8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1], [6, 7, 8, 9, 1, 2, 3, 4], [9, 1, 2, 3, 4, 5, 6, 7]],
                    [[1, 2, 3, 4, 5, 6, 7, 8, 'a'], [4, 0, 6, 7, 8, 9, 1, 2, 3], [7, 8, 9, 1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7, 8, 9, 1], [5, 6, 7, 8, 9, 1, 2, 3, 4], [8, 9, 1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9, 1, 2], [6, 7, 8, 9, 1, 2, 3, 4, 5], [9, 1, 2, 3, 4, 5, 6, 7, 8]]]
        
        for puzzle in invalids:
            with self.assertRaises(PuzzleInvalidException):
                _result = sudoku_solver(puzzle)

    def test_invalid_kata_examples1(self):
        invalid = [[1, 1, 3, 4, 5, 6, 7, 8, 9], [4, 0, 6, 7, 8, 9, 1, 2, 3], [7, 8, 9, 1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7, 8, 9, 1], [5, 6, 7, 8, 9, 1, 2, 3, 4], [8, 9, 1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9, 1, 2], [6, 7, 8, 9, 1, 2, 3, 4, 5], [9, 1, 2, 3, 4, 5, 6, 7, 8]]
        
        with self.assertRaises(PuzzleInvalidException):
            _result = sudoku_solver(invalid)

    def test_invalid_kata_examples2(self):
        invalid = [[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 0, 6, 7, 8, 9, 1, 2, 3], [7, 8, 9, 1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7, 8, 9, 1], [5, 6, 7, 8, 9, 1, 2, 3, 4], [8, 9, 1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9, 1, 2], [6, 7, 8, 9, 1, 2, 3, 4, 5], [9, 1, 2, 3, 4, 5, 6, 7, 8]]
        
        with self.assertRaises(PuzzleInvalidException):
            _result = sudoku_solver(invalid)

    def test_invalid_kata_examples3(self):
        invalid =  [[1, 2, 3, 4, 5, 6, 7, 8, 9], 
                    [4, 0, 6, 7, 8, 9, 1, 2, 3], 
                    [7, 8, 1, 1, 2, 3, 4, 5, 6], 
                    [2, 3, 4, 5, 6, 7, 8, 9, 1], 
                    [5, 6, 7, 8, 9, 1, 2, 3, 4], 
                    [8, 9, 1, 2, 3, 4, 5, 6, 7], 
                    [3, 4, 5, 6, 7, 8, 9, 1, 2], 
                    [6, 7, 8, 9, 1, 2, 3, 4, 5], 
                    [9, 1, 2, 3, 4, 5, 6, 7, 8]]
        
        with self.assertRaises(PuzzleInvalidException):
            _result = sudoku_solver(invalid)

    def test_invalid_kata_examples4(self):
        invalid = [[1, 2, 3, 4, 5, 6, 7, 8, 9], [4, 0, 6, 7, 8, 9, 1, 2, 3], [7, 8, 9, 1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7, 8, 9, 1], [5, 6, 7, 8, 9, 1, 2, 3, 4], [8, 9, 1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9, 1, 2], [6, 7, 8, 9, 1, 2, 3, 4, 5]]
        
        with self.assertRaises(PuzzleInvalidException):
            _result = sudoku_solver(invalid)

    def test_invalid_kata_examples5(self):
        invalid = [[1, 2, 3, 4, 5, 6, 7, 8], [4, 0, 6, 7, 8, 9, 1, 2], [7, 8, 9, 1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9], [5, 6, 7, 8, 9, 1, 2, 3], [8, 9, 1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9, 1], [6, 7, 8, 9, 1, 2, 3, 4], [9, 1, 2, 3, 4, 5, 6, 7]]
        
        with self.assertRaises(PuzzleInvalidException):
            _result = sudoku_solver(invalid)

    def test_invalid_kata_examples6(self):
        invalid = [[1, 2, 3, 4, 5, 6, 7, 8, 'a'], [4, 0, 6, 7, 8, 9, 1, 2, 3], [7, 8, 9, 1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7, 8, 9, 1], [5, 6, 7, 8, 9, 1, 2, 3, 4], [8, 9, 1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9, 1, 2], [6, 7, 8, 9, 1, 2, 3, 4, 5], [9, 1, 2, 3, 4, 5, 6, 7, 8]]
        
        with self.assertRaises(PuzzleInvalidException):
            _result = sudoku_solver(invalid)

    def test_impossible(self):
        impossible = [[0, 2, 3, 4, 5, 6, 7, 8, 9], [1, 5, 6, 7, 8, 9, 0, 2, 3], [7, 8, 9, 1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7, 8, 9, 1], [5, 6, 7, 8, 9, 1, 2, 3, 4], [8, 9, 1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9, 1, 2], [6, 7, 8, 9, 1, 2, 3, 4, 5], [9, 1, 2, 3, 4, 5, 6, 7, 8]]

        with self.assertRaises(PuzzleInvalidException):
            _result = sudoku_solver(impossible)

    def test_very_hard(self):
        hard_puzzle = [[8, 0, 0, 0, 0, 0, 0, 0, 0], 
                        [0, 0, 3, 6, 0, 0, 0, 0, 0], 
                        [0, 7, 0, 0, 9, 0, 2, 0, 0], 
                        [0, 5, 0, 0, 0, 7, 0, 0, 0], 
                        [0, 0, 0, 0, 4, 5, 7, 0, 0], 
                        [0, 0, 0, 1, 0, 0, 0, 3, 0], 
                        [0, 0, 1, 0, 0, 0, 0, 6, 8], 
                        [0, 0, 8, 5, 0, 0, 0, 1, 0], 
                        [0, 9, 0, 0, 0, 0, 4, 0, 0]]

        answer = sudoku_solver(hard_puzzle)

        solution = [[8, 1, 2, 7, 5, 3, 6, 4, 9], [9, 4, 3, 6, 8, 2, 1, 7, 5], [6, 7, 5, 4, 9, 1, 2, 8, 3], [1, 5, 4, 2, 3, 7, 8, 9, 6], [3, 6, 9, 8, 4, 5, 7, 2, 1], [2, 8, 7, 1, 6, 9, 5, 3, 4], [5, 2, 1, 9, 7, 4, 3, 6, 8], [4, 3, 8, 5, 2, 6, 9, 1, 7], [7, 9, 6, 3, 1, 8, 4, 5, 2]]

        self.assertEqual(answer, solution)

    def test_near_impossible(self):
        sevens =   [[0, 0, 0, 0, 0, 2, 7, 5, 0], 
                    [0, 1, 8, 0, 9, 0, 0, 0, 0], 
                    [0, 0, 0, 0, 0, 0, 0, 0, 0], 
                    [4, 9, 0, 0, 0, 0, 0, 0, 0], 
                    [0, 3, 0, 0, 0, 0, 0, 0, 8], 
                    [0, 0, 0, 7, 0, 0, 2, 0, 0], 
                    [0, 0, 0, 0, 3, 0, 0, 0, 9], 
                    [7, 0, 0, 0, 0, 0, 0, 0, 0], 
                    [5, 0, 0, 0, 0, 0, 0, 8, 0]]

        solution = [[9, 4, 6, 1, 8, 2, 7, 5, 3], 
                    [3, 1, 8, 5, 9, 7, 4, 2, 6], 
                    [2, 7, 5, 6, 4, 3, 8, 9, 1], 
                    [4, 9, 2, 3, 1, 8, 5, 6, 7], 
                    [6, 3, 7, 2, 5, 4, 9, 1, 8], 
                    [8, 5, 1, 7, 6, 9, 2, 3, 4], 
                    [1, 2, 4, 8, 3, 5, 6, 7, 9], 
                    [7, 8, 3, 9, 2, 6, 1, 4, 5], 
                    [5, 6, 9, 4, 7, 1, 3, 8, 2]]

        answer = sudoku_solver(sevens)

        self.assertEqual(answer, solution)

        # print("Near impossible", json.dumps(answer))

if __name__ == '__main__':
    unittest.main()